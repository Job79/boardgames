// <auto-generated />
using System;
using Infrastructure.BoardGamesEF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.BoardGamesEF.Migrations
{
    [DbContext(typeof(BoardGamesContext))]
    [Migration("20231024152346_add-snack-preferences-data")]
    partial class addsnackpreferencesdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Core.Domain.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("ImageUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is18Plus")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Het populaire handelsspel Catan in een nieuw jasje! Nu met nog meer spelbeleving! Lukt het jou om op Catan de belangrijkste macht te worden?",
                            Genre = 0,
                            ImageUri = "https://image.intertoys.nl/wcsstore/IntertoysCAS/images/catalog/full/1006506-e69938b2.jpg",
                            Is18Plus = false,
                            Name = "Catan",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Speel Monopoly Classic en maak kennis met de badeend, de Tyrannosaurus Rex en de pinguïn. Ga kopen en onderhandelen om de ultieme rijkdom te behalen.",
                            Genre = 2,
                            ImageUri = "https://image.intertoys.nl/wcsstore/IntertoysCAS/images/catalog/full/1557023-b23d0603.jpg",
                            Is18Plus = false,
                            Name = "Monopoly",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Verover het territorium van je vijanden in het strategische spel Risk! De worp van de dobbelstenen is jouw weg naar de overwinning!",
                            Genre = 0,
                            ImageUri = "https://image.intertoys.nl/wcsstore/IntertoysCAS/images/catalog/full/1387810-9348cdd6.jpg",
                            Is18Plus = false,
                            Name = "Risk",
                            Type = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Een speciale editie van Rummikub in een luxe, zwart blik! Ter ere van het 70-jarig bestaan van Rummikub heeft deze versie zware, zwarte stenen!",
                            Genre = 4,
                            ImageUri = "https://image.intertoys.nl/wcsstore/IntertoysCAS/images/catalog/thumb/1984456-04e5b2e1.jpg",
                            Is18Plus = true,
                            Name = "Rummikub",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Core.Domain.GameEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ImageUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is18Plus")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("OrganizerId");

                    b.ToTable("GameEvents");
                });

            modelBuilder.Entity("Core.Domain.GameEventRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameEventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameEventId");

                    b.HasIndex("UserId", "GameEventId")
                        .IsUnique();

                    b.ToTable("GameEventRegistrations");
                });

            modelBuilder.Entity("Core.Domain.SnackPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SnackPreferences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Vegetarisch"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Alcohol vrij"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lactose vrij"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Noten vrij"
                        });
                });

            modelBuilder.Entity("Core.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GameEventSnackPreference", b =>
                {
                    b.Property<int>("AvailableSnacksId")
                        .HasColumnType("int");

                    b.Property<int>("GameEventsId")
                        .HasColumnType("int");

                    b.HasKey("AvailableSnacksId", "GameEventsId");

                    b.HasIndex("GameEventsId");

                    b.ToTable("GameEventSnackPreference");
                });

            modelBuilder.Entity("GameGameEvent", b =>
                {
                    b.Property<int>("GameEventsId")
                        .HasColumnType("int");

                    b.Property<int>("GamesId")
                        .HasColumnType("int");

                    b.HasKey("GameEventsId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("GameGameEvent");
                });

            modelBuilder.Entity("SnackPreferenceUser", b =>
                {
                    b.Property<int>("SnackPreferencesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SnackPreferencesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("SnackPreferenceUser");
                });

            modelBuilder.Entity("Core.Domain.GameEvent", b =>
                {
                    b.HasOne("Core.Domain.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Core.Domain.GameEvent", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.User", "Organizer")
                        .WithMany("OrganisedGameEvents")
                        .HasForeignKey("OrganizerId");

                    b.Navigation("Address");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("Core.Domain.GameEventRegistration", b =>
                {
                    b.HasOne("Core.Domain.GameEvent", "GameEvent")
                        .WithMany("Registrations")
                        .HasForeignKey("GameEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.User", "User")
                        .WithMany("GameEventRegistrations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.User", b =>
                {
                    b.HasOne("Core.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("GameEventSnackPreference", b =>
                {
                    b.HasOne("Core.Domain.SnackPreference", null)
                        .WithMany()
                        .HasForeignKey("AvailableSnacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.GameEvent", null)
                        .WithMany()
                        .HasForeignKey("GameEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameGameEvent", b =>
                {
                    b.HasOne("Core.Domain.GameEvent", null)
                        .WithMany()
                        .HasForeignKey("GameEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnackPreferenceUser", b =>
                {
                    b.HasOne("Core.Domain.SnackPreference", null)
                        .WithMany()
                        .HasForeignKey("SnackPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.GameEvent", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Core.Domain.User", b =>
                {
                    b.Navigation("GameEventRegistrations");

                    b.Navigation("OrganisedGameEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
